# Each pull request that updates ASIM parsers triggers the script.
# The script runs ASIM Schema and Data testers on the "eco-connector-test" workspace.
name: Run ASIM testers on "ASIM-SchemaDataTester-GithubShared" workspace
on:
  pull_request_target:
    types: [opened, edited, reopened, synchronize, labeled]
    branches:
      - master
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs: 
  run-asim-testers:
    runs-on: ubuntu-latest
    steps:
      - name: Check for modified files using GitHub API
        id: check_files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for ASIM files in the pull request..."
          # Set variables
          REPO="Azure/Azure-Sentinel"
          PR_ID=${{ github.event.pull_request.number }}
          GITHUB_TOKEN=$GITHUB_TOKEN
          # Debugging: Print full API URL to verify correctness
          api_url="https://api.github.com/repos/$REPO/pulls/$PR_ID/files"
          echo "API URL: $api_url"
          # Fetch the list of changed files using GitHub REST API
          changed_files_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$api_url")
          # Print raw JSON response for debugging
          # echo "Raw JSON response: $changed_files_json"
          # Check if the request was successful
          if echo $changed_files_json | jq -e . >/dev/null 2>&1; then
            echo "Successfully fetched changed files."
          else
            echo "Failed to fetch changed files. Response:"
            echo "$changed_files_json"
            exit 1
          fi
          # Extract the list of filenames using jq
          changed_files=$(echo "$changed_files_json" | jq -r '.[].filename')
          # echo "Changed files: $changed_files"
          # Initialize the variable indicating if relevant files are found
          files_changed=false
          # Initialize the array to store the names of the matching files
          matching_files=()
          # Check each changed file against the specified paths
          for file in $changed_files; do
            if [[ $file == Parsers/ASimDns/Parsers/* ]] || \
              [[ $file == Parsers/ASimNetworkSession/Parsers/* ]] || \
              [[ $file == Parsers/ASimWebSession/Parsers/* ]] || \
              [[ $file == Parsers/ASimProcessEvent/Parsers/* ]] || \
              [[ $file == Parsers/ASimAuditEvent/Parsers/* ]] || \
              [[ $file == Parsers/ASimAuthentication/Parsers/* ]] || \
              [[ $file == Parsers/ASimFileEvent/Parsers/* ]] || \
              [[ $file == Parsers/ASimRegistryEvent/Parsers/* ]] || \
              [[ $file == Parsers/ASimUserManagement/Parsers/* ]] || \
              [[ $file == Parsers/ASimDhcpEvent/Parsers/* ]]; then
              # Add the file to the array
              matching_files+=("$file")
            fi
          done
          # Set the pipeline variable
          if [ ${#matching_files[@]} -gt 0 ]; then
            echo "ASIM parser changes detected."
            files_changed=true
          else
            echo "No ASIM parser changes detected."
            files_changed=false
          fi
          # Print the names of the matching files
          for file in "${matching_files[@]}"; do
            echo "$file"
          done
          # Output the result
          echo "##vso[task.setvariable variable=files_changed]$files_changed"
          echo "ASIM parser changes detected: $files_changed"
      - name: Checkout pull request branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          persist-credentials: false
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
      
      - name: Login to Azure Public Cloud with AzPowershell
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          enable-AzPSSession: true
          allow-no-subscriptions: true

      - name: Setup git config
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "<>"

      - name: Merge master into pull request branch
        run: |
          git merge origin/master
          Conflicts=$(git ls-files -u | wc -l)
          if [ "$Conflicts" -gt 0 ] ; then
            echo "There is a merge conflict. Aborting"
            git merge --abort
            exit 1
          fi

      - name: Run ASIM testers
        uses: azure/powershell@v2
        with:
          inlineScript: |
            & ".script/tests/asimParsersTest/runAsimTesters.ps1"
          azPSVersion: "latest"
          errorActionPreference: continue
          failOnStandardError: false
